name: Build and pack Ros packages
on:
  workflow_call:
    inputs:
      deploy:
        required: false
        type: string
        default: 'false'
      release:
        required: false
        type: string
        default: 'false'
      ROS_BUILDTOOLS_TAG:
        required: false
        type: string
        default: "v2.0.10"
      ref_name:
        required: false
        type: string
        default: "latest"
      with_docs:
        required: false
        type: string
        default: 'false'

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true


jobs:

  RefreshSource:
    if: ${{ inputs.deploy == 'false' }}
    runs-on: ubuntu-20.04
    steps:
      - uses: docker://chinthakagodawita/autoupdate-action:v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: '${{ secrets.auto_commit_pwd }}'
          MERGE_MSG: "Branch was auto-updated."

  Pre-commit:
    if: ${{ inputs.deploy == 'false' }}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - uses: pre-commit/action@v2.0.3

  Pack:
    runs-on: ubuntu-20.04
    if: ${{ inputs.release == 'false' }}
    container:
      image: registry.aws.cloud.mov.ai/qa/ros-buildtools-noetic:${{ inputs.ROS_BUILDTOOLS_TAG }}
      options: --user root
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Find Package details
      id: vars
      run: |
        PACKAGE_VERSION=$(dpkg-parsechangelog --show-field Version)
        PACKAGE_NAME=$(dpkg-parsechangelog --show-field Source)

        echo "pkg_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "pkg_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Raise Version
      id: vars-after-raise
      run: |
        PACKAGE_VERSION=${{ steps.vars.outputs.pkg_version }}
        main_version=${PACKAGE_VERSION%-*}
        build_id="${PACKAGE_VERSION#*-}"
        raised_buildid=$(($build_id+1))
        RAISED_PACKAGE_VERSION="$main_version-$raised_buildid"
        echo "pkg_version=$RAISED_PACKAGE_VERSION" >> $GITHUB_OUTPUT

    - name: Pack debian
      run: |
        git config --global --add safe.directory $(pwd)
        git config --global user.name '${{ secrets.auto_commit_user }}'
        git config --global user.email '${{ secrets.auto_commit_mail }}'
        git config --global user.password ${{ secrets.auto_commit_pwd }}
        apt-get update
        apt-get install -y devscripts equivs git-buildpackage
        # Set the install command to be used by mk-build-deps (use --yes for non-interactive)
        install_tool="apt-get -o Debug::pkgProblemResolver=yes --no-install-recommends --yes"
        # Install build dependencies automatically
        mk-build-deps --install --tool="${install_tool}" debian/control
        # Add version into changelog and commit it
        commit_options=""
        if [ "${{ inputs.deploy }}" == "true" ]; then
          commit_options="--commit --commit-msg='[skip actions] Automatic Bump of build version'"
        fi
        gbp dch --ignore-branch -N ${{ steps.vars-after-raise.outputs.pkg_version }} -c $commit_options
        # Build .deb with binaries only
        dpkg-buildpackage -b --unsigned-source --unsigned-changes
        # Store generated .deb
        mkdir artifacts && \
        cp ../*.deb artifacts
        
    - name: Prepare raise variables
      if: ${{ inputs.deploy == 'true' }}
      id: pre_raise
      run: |
        echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: Raise App version
      if: ${{ inputs.deploy == 'true' }}
      uses: CasperWA/push-protected@v2.14.0
      with:
        token: ${{ secrets.auto_commit_pwd }}
        branch: ${{ steps.pre_raise.outputs.branch }}
        unprotect_reviews: true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: artifacts/*

    - name: Commit info
      if: ${{ inputs.deploy == 'true' }}
      id: commit
      shell: bash
      run: |
        commit_hash=$(git log --format="%H" -n 1)
        echo "commit_id=$commit_hash" >> $GITHUB_OUTPUT

    - name: Create Github Release
      if: ${{ inputs.deploy == 'true' }}
      uses: softprops/action-gh-release@v1
      with:
        prerelease: true
        name: "Release of ${{ steps.vars-after-raise.outputs.pkg_version  }}"
        generate_release_notes: true
        files: artifacts/*.deb
        tag_name: ${{ steps.vars-after-raise.outputs.pkg_version  }}
        target_commitish: ${{ steps.commit.outputs.commit_id }}
      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}
    
    - uses: DenverCoder1/doxygen-github-pages-action@v1
      if: ${{ inputs.with_docs == 'true' }}
      with:
        github_token: ${{ secrets.gh_token }}

  Publish-To-Testing:
    needs: [Pack]
    if: ${{ inputs.release == 'false' && inputs.deploy == 'true' }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        nexus_ppa: ["ppa-testing", "ppa-testing-focal", "ppa-testing-jammy", "ppa-testing-noble"]
    steps:

    - name: Download a single artifact
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: artifacts

    - name: Publish to Nexus
      run: |
          NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
          FILE_LOCATION=$(find artifacts/*.deb)
          curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
          -H "Content-Type: multipart/form-data" \
          --data-binary "@$FILE_LOCATION" \
          "https://$NEXUS_ENDPOINT/repository/${{ matrix.nexus_ppa }}/"

  Publish-To-Stable:
    if: ${{ inputs.release == 'true' }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        nexus_ppa: [ "ppa-main", "ppa-stable-focal", "ppa-stable-jammy", "ppa-stable-noble"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch artifact from github release
        run: |
          git config --global --add safe.directory $(pwd)
          mkdir artifacts
          cd artifacts
          gh release download ${{ inputs.ref_name }} -p *.deb
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Publish to PPAs
        run: |
          NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
          FILE_LOCATION=$(find artifacts/*.deb)
          curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
          -H "Content-Type: multipart/form-data" \
          --data-binary "@$FILE_LOCATION" \
          "https://$NEXUS_ENDPOINT/repository/${{ matrix.nexus_ppa }}/"
