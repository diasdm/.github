name: Build and pack Cpp packages
on:
  workflow_call:
    inputs:
      deploy:
        required: false
        type: string
        default: 'false'
      release:
        required: false
        type: string
        default: 'false'
      components:
        required: false
        type: string
        default: ''
      custom_requirements:
        required: false
        type: string
        default: ''
      prod_publish_repos:
        required: false
        type: string
        default: '["ppa-main"]'

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      sonar_token:
        required: true

jobs:
  Build:
    strategy:
      matrix:
        sub_component: ${{ fromJSON(inputs.components) }}
    if: ${{ inputs.release == 'false' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/qa/ros-buildtools-noetic:v2.0.13
      options: --user root
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive

    - name: Find Package details
      id: vars
      run: |
        PACKAGE_VERSION=$(dpkg-parsechangelog --show-field Version)
        PACKAGE_NAME=$(dpkg-parsechangelog --show-field Source)
        #echo ::set-output name=pkg_name::$PACKAGE_NAME
        #echo ::set-output name=pkg_version::$PACKAGE_VERSION
        echo "pkg_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
        echo "pkg_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
      working-directory: ${{ matrix.sub_component }}

    - name: Raise Version
      id: vars-after-raise
      run: |
        PACKAGE_VERSION=${{ steps.vars.outputs.pkg_version }}
        main_version=${PACKAGE_VERSION%-*}
        build_id="${PACKAGE_VERSION#*-}"
        raised_buildid=$(($build_id+1))
        RAISED_PACKAGE_VERSION="$main_version-$raised_buildid"
        #echo ::set-output name=pkg_version::$RAISED_PACKAGE_VERSION
        echo "pkg_version=$RAISED_PACKAGE_VERSION" >> $GITHUB_OUTPUT
      working-directory: ${{ matrix.sub_component }}

    - name: Install requirements
      shell: bash
      run: |
        apt-get update
        IFS=';' read -r -a array <<< '${{ inputs.custom_requirements }}'

        for cmd in "${array[@]}"
        do
            echo "$cmd"
            eval $cmd
        done
        echo "finished custom script, now the requirement.apt"
        apt-get install $(cat ./requirements.apt) -y
      working-directory: ${{ matrix.sub_component}}

        #          curl -fsSL http://packages.osrfoundation.org/gazebo.key | apt-key add - ;add-apt-repository "deb http://packages.osrfoundation.org/gazebo/ubuntu-stable $(lsb_release -cs) main"


    - name: SonarQube Scan
      if: ${{ false }}
      uses: SonarSource/sonarqube-scan-action@v1.0.0
      env:
        SONAR_TOKEN: ${{ secrets.sonar_token }}
        SONAR_HOST_URL: https://sonarqube.aws.cloud.mov.ai
      with:
        projectBaseDir: ./${{ matrix.sub_component }}
        args: >
          -Dsonar.organization=MOV-AI
          -Dsonar.projectKey=${{ github.event.repository.name }}
          -Dsonar.verbose=true
          -Dsonar.sources=.
          -Dsonar.scm.provider=git
          -Dsonar.qualitygate.wait=true
          -Dsonar.qualitygate.timeout=300

    - name: Link to SonarQube Dashboard
      shell: bash
      run: |
        echo "Please check report here: https://sonarqube.aws.cloud.mov.ai/dashboard?id=${{ github.event.repository.name }}"
      id: sonar_links


    - name: Build
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_PREFIX_PATH=/usr/lib/x86_64-linux-gnu/ -DCMAKE_BUILD_TYPE=Release
        make
      working-directory: ${{ matrix.sub_component }}

    - name: Pack
      run: |
        dch -v ${{ steps.vars-after-raise.outputs.pkg_version }} -b -D "UNRELEASED" "bump version"
        dpkg-buildpackage -b && \
        mkdir artifacts && \
        cp ../*.deb artifacts
      working-directory: ${{ matrix.sub_component }}

    - name: Archive binary
      uses: actions/upload-artifact@v4
      with:
        name: package_${{ matrix.sub_component }}
        path: ${{ matrix.sub_component }}/artifacts/*
        retention-days: 5

    - name: Print generated packages
      run: ls -la artifacts
      working-directory: ${{ matrix.sub_component }}

  Publish_and_Release:
    if: ${{ inputs.deploy == 'true' }}
    runs-on: ubuntu-20.04
    needs:  [Build]
    container:
      image: registry.aws.cloud.mov.ai/qa/ros-buildtools-noetic:v2.0.13
      options: --user root
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    outputs:
      package_version: ${{ steps.vars-after-raise.outputs.pkg_version }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive

    - name: Raise Version
      id: vars-after-raise
      shell: bash
      run: |
        sub_component_expr="${{inputs.components}}"
        sub_component_str=$(echo $sub_component_expr | sed -e 's/\[//g' | sed -e 's/\]//g')

        IFS=',' read -r -a sub_components_array <<< $sub_component_str

        for sub_component in "${sub_components_array[@]}"
        do
          echo "$sub_component"
          pushd $sub_component >/dev/null

          echo "raising component $sub_component"
          PACKAGE_VERSION=$(dpkg-parsechangelog --show-field Version)
          main_version=${PACKAGE_VERSION%-*}
          build_id="${PACKAGE_VERSION#*-}"
          raised_buildid=$(($build_id+1))
          RAISED_PACKAGE_VERSION="$main_version-$raised_buildid"
          dch -v $RAISED_PACKAGE_VERSION -b -D "UNRELEASED" "bump version"

          popd >/dev/null
        done

        #echo ::set-output name=pkg_version::$RAISED_PACKAGE_VERSION
        echo "pkg_version=$RAISED_PACKAGE_VERSION" >> $GITHUB_OUTPUT
      #working-directory: ${{ matrix.sub_component }}

    - name: Commit raise version
      id: raise
      run: |
        git config --global --add safe.directory $(pwd)
        git config --global user.name '${{ secrets.auto_commit_user }}'
        git config --global user.email '${{ secrets.auto_commit_mail }}'
        git config --global user.password ${{ secrets.auto_commit_pwd }}
        git pull
        git add **changelog
        git commit -m "[skip actions] Automatic Bump of build version"


    - name: Prepare raise variables
      id: pre_raise
      run: |
        #echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
        echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

    - name: Raise App version
      uses: CasperWA/push-protected@v2.14.0
      with:
        token: ${{ secrets.auto_commit_pwd }}
        branch: ${{ steps.pre_raise.outputs.branch }}
        unprotect_reviews: true

    - name: Commit info
      id: commit
      shell: bash
      run: |
        commit_hash=$(git log --format="%H" -n 1)
        #echo ::set-output name=commit_id::$commit_hash
        echo "commit_id=$commit_hash" >> $GITHUB_OUTPUT

    - name: Create Github Release
      uses: softprops/action-gh-release@v1
      with:
        name: "Release of ${{ steps.vars-after-raise.outputs.pkg_version }}"
        body: "Please add release notes"
        tag_name: ${{ steps.vars-after-raise.outputs.pkg_version }}
        target_commitish: ${{ steps.commit.outputs.commit_id }}
        token: ${{ secrets.gh_token }}
        prerelease: true
        generate_release_notes: true
        #files: artifacts/*.deb

  Publish_assets:
    needs: [Publish_and_Release]
    strategy:
      matrix:
        sub_component: ${{ fromJSON(inputs.components) }}
    if: ${{ inputs.deploy == 'true' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/qa/ros-buildtools-noetic:v2.0.13
      options: --user root
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          submodules: recursive

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: package_${{ matrix.sub_component }}
          path: artifacts
          merge-multiple: true

      - name: Publish to Nexus ppa-dev
        shell: bash
        run: |
            NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
            NEXUS_REPO="ppa-dev"

            for file in artifacts/*.deb
            do
              RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
              -H "Content-Type: multipart/form-data" \
              --data-binary "@$file" \
              -w '%{http_code}' \
              "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")

              #retry
              if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
                echo "Failed upload with $RETURN_CODE. Retrying"

                RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
                  -H "Content-Type: multipart/form-data" \
                  --data-binary "@$file" \
                  -w '%{http_code}' \
                  "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")
              fi

              if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
                echo "Failed upload with $RETURN_CODE. Exiting"
                exit 1
              fi

            done

      - name: Publish to Nexus ppa-testing
        shell: bash
        run: |
            NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
            NEXUS_REPO="ppa-testing"

            for file in artifacts/*.deb
            do
              RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
              -H "Content-Type: multipart/form-data" \
              --data-binary "@$file" \
              -w '%{http_code}' \
              "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")

              #retry
              if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
                echo "Failed upload with $RETURN_CODE. Retrying"

                RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
                  -H "Content-Type: multipart/form-data" \
                  --data-binary "@$file" \
                  -w '%{http_code}' \
                  "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")
              fi

              if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
                echo "Failed upload with $RETURN_CODE. Exiting"
                exit 1
              fi

            done

      - name: Update Github Release
        if: ${{ inputs.deploy == 'true' }}
        shell: bash
        run: |
          git config --global --add safe.directory $(pwd)

          for asset in artifacts/*; do
            # do nothing if folder is empty
            if [[ $asset != "artifacts/*" ]]; then
              gh release upload ${{ needs.Publish_and_Release.outputs.package_version }} $asset
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

  Release:
    strategy:
      matrix:
        publish_repo: ${{ fromJSON(inputs.prod_publish_repos) }}
    if: ${{ inputs.release == 'true' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/qa/ros-buildtools-noetic:v2.0.13
      options: --user root
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive

    - name: Set tag output
      id: vars
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

    - name: Fetch artifact from github release
      run: |
        git config --global --add safe.directory $(pwd)
        mkdir artifacts
        cd artifacts
        gh release download ${{ steps.vars.outputs.tag}} -p *.deb
      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}

    - name: Publish to Nexus
      run: |
          NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
          NEXUS_REPO="${{ matrix.publish_repo }}"
          FILE_LOCATION=$(find artifacts/*.deb)
          find artifacts -type f -name '*.deb' -exec curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
          -H "Content-Type: multipart/form-data" \
          --data-binary "@{}" \
          "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/" \;
