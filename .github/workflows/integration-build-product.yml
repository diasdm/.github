name: Build Packer images
on:
  workflow_call:
    inputs:
      product_name:
        required: true
        type: string
      ros_distro:
        required: true
        type: string
      with_simulation:
        required: false
        type: string
        default: true
      continue_on_mobtest_error:
        required: false
        type: boolean
        default: false

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      aws_key_id:
        required: true
      aws_secret_key_id:
        required: true
      slack_token_id:
        required: true

env:
  CI_INTEGRATION_SCRIPTS_VERSION: "2.2.0.7"
  MOBTEST_VERSION: "0.0.5.1"
  PACKAGE_DEPLOYER_VERSION: "1.0.0.25"
  GITHUB_API_USR: "OttoMation-Movai"
  AWS_ACCESS_KEY_ID: ${{ secrets.aws_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.aws_secret_key_id }}
  REGISTRY: registry.cloud.mov.ai
  USERSPACE_FOLDER_PATH: userspace

jobs:
  Validate-boostrap-configs:
    runs-on: integration-pipeline
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate Manifest
        shell: bash
        run: |
          apt install -y yamllint
          yamllint product-manifest.yaml

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: Bootstraping simulator metadata
        run: |
          git config --global --add safe.directory $(pwd)
          git fetch
          git checkout origin/${GITHUB_REF#refs/heads/} -- product.version
          cat product.version
          rm -rf simulator_artifacts ci_artifacts

          integration-pipeline merge_manifest_dependency \
                --dependency_name product-platform \
                --gh_api_user $GITHUB_API_USR \
                --gh_api_pwd ${{ secrets.auto_commit_pwd }} \
                --auto_fetch


          if [ "${{ inputs.with_simulation }}" = "true" ];
          then
          integration-pipeline generate_meta_simulator_artifacts \
                --manifest_platform_base_key product_dependencies \
                --product_name ${{ inputs.product_name }} \
                --branch ${GITHUB_REF#refs/heads/} \
                --update_simulator \
                --docker_registry $REGISTRY

          mkdir simulator_artifacts
          cp ci_artifacts/* ./simulator_artifacts
          fi

      - name: Stash sim_configs
        if: ${{ inputs.with_simulation == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: sim_configs
          path: simulator_artifacts/*

      - name: raise
        run: |
          rm -rf simulator_artifacts ci_artifacts
          mkdir platform_configs
          integration-pipeline raise
          cp product.version ./platform_configs/product.version
          cp product-manifest.yaml ./platform_configs/product-manifest.yaml

      - name: Stash raised_meta
        uses: actions/upload-artifact@v3
        with:
          name: raised_meta
          path: platform_configs/*

  Build-Spawner:
    needs: [Validate-boostrap-configs]
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
    runs-on: integration-pipeline
    outputs:
      raised_version: ${{ steps.pre_build.outputs.raised_version }}
    steps:
      - uses: rtCamp/action-cleanup@master
      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        run: |
          echo "public ip: $(curl ipinfo.io/ip)"
          echo "private ip: $(hostname -I | awk '{print $1}')"

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: unstash raised_meta
        uses: actions/download-artifact@v3
        with:
          name: raised_meta
          path: platform_configs

      - name: Generate product configs from manifest
        shell: bash
        run: |
          cp ./platform_configs/product.version product.version
          cp ./platform_configs/product-manifest.yaml product-manifest.yaml
          export PATH="$HOME/.local/bin:$PATH"
          cat product-manifest.yaml
          integration-pipeline generate_meta_artifacts --update_simulator --override_spawner ${{ inputs.product_name }} --manifest_platform_base_key "product_dependencies"

      - name: Stash manifest
        uses: actions/upload-artifact@v3
        with:
          name: manifest
          path: product-manifest.yaml

      - name: Lint docker image
        shell: bash
        run: |
          wget https://github.com/hadolint/hadolint/releases/download/v2.9.3/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          ./hadolint-Linux-x86_64 docker/${{ matrix.distro }}/Dockerfile -t error

      - name: Login to Private Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.registry_user }}
          password: ${{ secrets.registry_password }}
          registry: ${{ env.REGISTRY }}

      - name: Prepare docker build variables
        id: pre_build
        run: |
          #echo ::set-output name=base_name::$(cat ci_artifacts/spawner_base_name_${{ matrix.distro }}.ci)
          #echo ::set-output name=base_version::$(cat ci_artifacts/spawner_base_version_${{ matrix.distro }}.ci)
          #echo ::set-output name=raised_version::$(cat product.version)
          echo "base_name=$(cat ci_artifacts/spawner_base_name_${{ matrix.distro }}.ci)" >> $GITHUB_OUTPUT
          echo "base_version=$(cat ci_artifacts/spawner_base_version_${{ matrix.distro }}.ci)" >> $GITHUB_OUTPUT
          echo "raised_version=$(cat product.version)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build with args and push
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          file: docker/${{ matrix.distro }}/Dockerfile
          push: true
          tags: "${{ env.REGISTRY }}/ci/${{ inputs.product_name }}-${{ matrix.distro }}:${{ steps.pre_build.outputs.raised_version }}"
          pull: true
          build-args: |
            DOCKER_REGISTRY=${{ env.REGISTRY }}
            BASE_IMAGE=${{ steps.pre_build.outputs.base_name }}
            TAG=${{ steps.pre_build.outputs.base_version }}
            CI_SCRIPT_VERSION=${{ env.CI_INTEGRATION_SCRIPTS_VERSION }}

      - name: Stash robot_jsons_${{ matrix.distro }}
        uses: actions/upload-artifact@v3
        with:
          name: robot_jsons_${{ matrix.distro }}
          path: "*.json*"

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

  Install-Robot:
    needs: [Build-Spawner]
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
    runs-on: integration-pipeline
    steps:
      - uses: rtCamp/action-cleanup@master

      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        run: |
          echo "public ip: $(curl ipinfo.io/ip)"
          echo "private ip: $(hostname -I | awk '{print $1}')"

      - name: unstash raised_meta
        uses: actions/download-artifact@v3
        with:
          name: raised_meta
          path: .

      - name: unstash manifest
        uses: actions/download-artifact@v3
        with:
          name: manifest
          path: .

      - name: unstash robot_jsons_${{ matrix.distro }}
        uses: actions/download-artifact@v3
        with:
          name: robot_jsons_${{ matrix.distro }}
          path: .

      - name: Login to Private Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.registry_user }}
          password: ${{ secrets.registry_password }}
          registry: ${{ env.REGISTRY }}

      - name: Docker load spawner image
        shell: bash
        run: |
          docker pull "${{ env.REGISTRY }}/ci/${{ inputs.product_name }}-${{ matrix.distro }}:${{ needs.Build-Spawner.outputs.raised_version }}"
          docker tag "${{ env.REGISTRY }}/ci/${{ inputs.product_name }}-${{ matrix.distro }}:${{ needs.Build-Spawner.outputs.raised_version }}" "${{ env.REGISTRY }}/qa/${{ inputs.product_name }}-${{ matrix.distro }}:${{ needs.Build-Spawner.outputs.raised_version }}"

      - name: Installation
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

          mkdir -p artifacts
          cp *.json artifacts/
          CONFIG_FILE_NAME=${{ inputs.product_name }}-${{ matrix.distro }}.json
          export PATH="$HOME/.local/bin:$PATH"
          mkdir -p userspace/
          export USERSPACE_FOLDER_PATH="$(pwd)/userspace"
          integration-pipeline get_json_value --file $CONFIG_FILE_NAME.ci --key services_version --output_file movai_service_version
          wget https://movai-scripts.s3.amazonaws.com/QuickStart.bash
          chmod +x ./QuickStart.bash
          ./QuickStart.bash --apps $(cat movai_service_version) $CONFIG_FILE_NAME
          execution_status=$?
          exit $execution_status
          rm movai_service_version

      - name: Run mobtest
        continue-on-error: ${{ inputs.continue_on_mobtest_error }}
        shell: bash
        run: |
          container_id=$(docker ps --format '{{.Names}}' --filter "name=^spawner-.*")
          docker exec -t "$container_id" bash -c '
            set -e
            export PATH="$HOME/.local/bin:$PATH"
            python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple mobtest==${{ env.MOBTEST_VERSION }} --ignore-installed
            mobtest proj /opt/ros/${{ matrix.distro }}/share/
          '

      - name: Collect Installed components
        shell: bash
        run: |
          container_id=$(docker ps -q -f "ancestor=$REGISTRY/qa/${{ inputs.product_name }}-${{ matrix.distro }}:$(cat product.version)")
          docker exec -t "$container_id" bash -c '
            set -e
            sudo apt update
            export PATH="$HOME/.local/bin:$PATH"
            python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple movai-package-deployer==${{ env.PACKAGE_DEPLOYER_VERSION }} --ignore-installed
            package-deployer scan
            ls -la /tmp
          ' || true
            docker cp $container_id:/tmp/deployable.dploy artifacts/${{ inputs.product_name }}-${{ matrix.distro }}-deployable.dploy
            docker cp $container_id:/tmp/undeployable.dploy artifacts/${{ inputs.product_name }}-${{ matrix.distro }}-3rdParty.dploy
            CONFIG_FILE_NAME=${{ inputs.product_name }}-${{ matrix.distro }}.json

            echo "$REGISTRY/qa/${{ inputs.product_name }}-${{ matrix.distro }}:$(cat product.version)">artifacts/product-${{ matrix.distro }}.image.artifact

      - name: Push spawner image
        shell: bash
        run: docker push "${{ env.REGISTRY }}/qa/${{ inputs.product_name }}-${{ matrix.distro }}:${{ needs.Build-Spawner.outputs.raised_version }}"

      - name: Stash deploy_artifacts_noetic
        uses: actions/upload-artifact@v3
        with:
          name: deploy_artifacts_noetic
          path: artifacts/*

      - name: Remove robots
        if: always()
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

  Build-Simulator:
    needs: [Validate-boostrap-configs, Build-Spawner]
    runs-on: integration-pipeline
    env:
      DISTRO: noetic
    outputs:
      image_name: "${{ steps.pre_simulator_build.outputs.image_name }}"
      skip_simulator: "${{ steps.pre_simulator_build.outputs.skip_simulator_build }}"

    steps:
      - name: Pre clean ups
        uses: rtCamp/action-cleanup@master
        if: ${{ inputs.with_simulation == 'true' }}

      - name: Checkout
        uses: actions/checkout@v3
        if: ${{ inputs.with_simulation == 'true' }}

      - name: Agent info
        if: ${{ inputs.with_simulation == 'true' }}
        run: |
          echo "public ip: $(curl ipinfo.io/ip)"
          echo "private ip: $(hostname -I | awk '{print $1}')"

      - name: Install CI Scripts
        if: ${{ inputs.with_simulation == 'true' }}
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: unstash sim_configs
        if: ${{ inputs.with_simulation == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: sim_configs
          path: simulator_artifacts

      - name: unstash manifest
        if: ${{ inputs.with_simulation == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: manifest
          path: .

      - name: Prepare Skip variables
        id: pre_simulator_build
        if: ${{ inputs.with_simulation == 'true' }}
        run: |
          if [ ! -f "simulator_artifacts/version" ]; then
            #echo ::set-output name=skip_simulator_build::"true"
            echo "skip_simulator_build=true" >> $GITHUB_OUTPUT
          else
            #echo ::set-output name=skip_simulator_build::"false"
            echo "skip_simulator_build=false" >> $GITHUB_OUTPUT
          fi
          #echo ::set-output name=image_name::"${{ env.REGISTRY }}/ci/$(cat simulator_artifacts/simulator_name.ci)"
          echo "image_name=${{ env.REGISTRY }}/ci/$(cat simulator_artifacts/simulator_name.ci)" >> $GITHUB_OUTPUT

      - name: Lint docker image
        if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' && inputs.with_simulation == 'true' }}
        shell: bash
        run: |
          wget https://github.com/hadolint/hadolint/releases/download/v2.9.3/hadolint-Linux-x86_64
          chmod +x hadolint-Linux-x86_64
          ./hadolint-Linux-x86_64 docker/$DISTRO/Dockerfile-simulator -t error

      - name: Fetch artifacts
        if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' && inputs.with_simulation == 'true' }}
        shell: bash
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          integration-pipeline fetch_simulator_models \
          --manifest_platform_base_key product_components \
          --gh_api_user $GITHUB_API_USR \
          --gh_api_pwd ${{ secrets.auto_commit_pwd }} \
          --target_dir "./models"
          if [ ! -d ./models ]; then mkdir -p ./models; fi

      - name: Login to Private Registry
        if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' && inputs.with_simulation == 'true' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.registry_user }}
          password: ${{ secrets.registry_password }}
          registry: ${{ env.REGISTRY }}

      - name: Prepare docker build variables
        if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' && inputs.with_simulation == 'true' }}
        id: pre_build
        run: |
          #echo ::set-output name=base_name::$(cat simulator_artifacts/simulator_base.ci)
          echo "base_name=$(cat simulator_artifacts/simulator_base.ci)" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build with args and push
        if: ${{ steps.pre_simulator_build.outputs.skip_simulator_build == 'false' && inputs.with_simulation == 'true'}}
        uses: docker/build-push-action@v3
        with:
          context: .
          platforms: linux/amd64
          file: docker/${{ env.DISTRO }}/Dockerfile-simulator
          push: true
          tags: ${{ steps.pre_simulator_build.outputs.image_name }}
          pull: true
          build-args: |
            BASE_IMAGE=${{ steps.pre_build.outputs.base_name }}
            CI_SCRIPT_VERSION=${{ env.CI_INTEGRATION_SCRIPTS_VERSION }}

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

  Install-Simulator-Robot:
    needs: [Build-Spawner, Build-Simulator]
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
    runs-on: integration-pipeline
    steps:
      - uses: rtCamp/action-cleanup@master
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}

      - name: Checkout
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        uses: actions/checkout@v3

      - name: Agent info
        if: ${{ inputs.with_simulation == 'true' }}
        run: |
          echo "public ip: $(curl ipinfo.io/ip)"
          echo "private ip: $(hostname -I | awk '{print $1}')"

      - name: unstash raised_meta
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: raised_meta
          path: .

      - name: unstash manifest
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: manifest
          path: .

      - name: unstash sim_configs
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: sim_configs
          path: simulator_artifacts

      - name: unstash robot_jsons_${{ matrix.distro }}
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: robot_jsons_${{ matrix.distro }}
          path: .

      - name: Login to Private Registry
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.registry_user }}
          password: ${{ secrets.registry_password }}
          registry: ${{ env.REGISTRY }}

      - name: Docker load spawner image
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        shell: bash
        run: |
          docker pull "${{ env.REGISTRY }}/ci/${{ inputs.product_name }}-${{ matrix.distro }}:${{ needs.Build-Spawner.outputs.raised_version }}"
          docker tag "${{ env.REGISTRY }}/ci/${{ inputs.product_name }}-${{ matrix.distro }}:${{ needs.Build-Spawner.outputs.raised_version }}" "${{ env.REGISTRY }}/qa/${{ inputs.product_name }}-${{ matrix.distro }}:${{ needs.Build-Spawner.outputs.raised_version }}"

      - name: Docker load simulator image
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        shell: bash
        run: |
          promoted_name=$(echo "${{ needs.Build-Simulator.outputs.image_name }}" | sed "s-/ci/-/qa/-g")
          docker pull "${{ needs.Build-Simulator.outputs.image_name }}"
          docker tag "${{ needs.Build-Simulator.outputs.image_name }}" $promoted_name

      - name: Installation
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

          mkdir -p artifacts
          cp *.json artifacts/
          CONFIG_FILE_NAME="standalone-${{ inputs.product_name }}-simulator-${{ matrix.distro }}.json"
          mkdir -p userspace/models_database/ userspace/tugbot_ignition/

          export USERSPACE_FOLDER_PATH="$(pwd)/userspace"
          export PUBLIC_IP=$(hostname -I | awk '{print $1}')

          export PATH="$HOME/.local/bin:$PATH"
          integration-pipeline get_json_value --file $CONFIG_FILE_NAME.ci --key services_version --output_file movai_service_version

          wget https://movai-scripts.s3.amazonaws.com/QuickStart.bash
          chmod +x ./QuickStart.bash
          ./QuickStart.bash --apps $(cat movai_service_version) $CONFIG_FILE_NAME
          execution_status=$?
          exit $execution_status
          rm movai_service_version
        env:
          SIMULATION_ID: "CI"

      - name: Run mobtest
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        continue-on-error: ${{ inputs.continue_on_mobtest_error }}
        shell: bash
        run: |
          container_id=$(docker ps --format '{{.Names}}' --filter "name=^spawner-.*")
          docker exec -t "$container_id" bash -c '
            set -e
            export PATH="$HOME/.local/bin:$PATH"
            python3 -m pip install -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple mobtest==${{ env.MOBTEST_VERSION }} --ignore-installed
            mobtest proj /opt/ros/${{ matrix.distro }}/share/
          '

      - name: Collect Installed components
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        shell: bash
        run: |
          export PATH="$HOME/.local/bin:$PATH"
          cd simulator_artifacts
          integration-pipeline publish_simulator_state_artifacts \
                --product_name ${{ inputs.product_name }} \
                --branch ${GITHUB_REF#refs/heads/}

      - name: Push simulator image
        if: ${{ needs.Build-Simulator.outputs.skip_simulator == 'false' && inputs.with_simulation == 'true' }}
        id: promote
        shell: bash
        run: |
          sim_img_name="$(echo "${{ needs.Build-Simulator.outputs.image_name }}" | sed "s-/ci/-/qa/-g")"
          docker push "$sim_img_name"
          echo "image_name=$sim_img_name" >> $GITHUB_OUTPUT

      - name: pre-stash
        if: ${{ inputs.with_simulation == 'true' }}
        shell: bash
        run: |
          echo "${{ steps.promote.outputs.image_name }}" > simulator.image.artifact

      - name: Stash deploy_simulator_artifacts
        if: ${{ inputs.with_simulation == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: deploy_simulator_artifacts
          path: simulator.image.artifact

      - name: Remove robots
        if: always()
        shell: bash
        run: |
          for robot in $(movai-cli robots list); do
            movai-cli robots stop $robot
            sleep 5
            movai-cli robots remove $robot
          done || true

      - name: Docker cleanups
        if: always()
        shell: bash
        run: |
          docker system prune -f
          docker image prune --all -f

  publish:
    needs: [Install-Robot]
    runs-on: integration-pipeline
    steps:
      - uses: rtCamp/action-cleanup@master

      - name: Checkout
        uses: actions/checkout@v3

      - name: Agent info
        run: |
          echo "public ip: $(curl ipinfo.io/ip)"
          echo "private ip: $(hostname -I | awk '{print $1}')"

      - name: unstash raised_meta
        uses: actions/download-artifact@v3
        with:
          name: raised_meta
          path: platform_configs

      - name: unstash deploy_artifacts_noetic
        uses: actions/download-artifact@v3
        with:
          name: deploy_artifacts_noetic
          path: artifacts

      - name: unstash manifest
        uses: actions/download-artifact@v3
        with:
          name: manifest
          path: .

      # - name: unstash deploy_simulator_artifacts
      #   if: ${{ inputs.with_simulation == 'true' }}
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: deploy_simulator_artifacts
      #     path: .

      - name: Install CI Scripts
        shell: bash
        run: python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed

      - name: Install Package Deployer
        shell: bash
        run: python3 -m pip install movai-package-deployer==$PACKAGE_DEPLOYER_VERSION --ignore-installed

      - name: Publish and create release
        shell: bash
        run: |
          git config --global --add safe.directory $(pwd)
          git config --global user.name '${{ secrets.auto_commit_user }}'
          git config --global user.email '${{ secrets.auto_commit_mail }}'
          git config --global user.password ${{ secrets.auto_commit_pwd }}

          cp ./platform_configs/product.version product.version
          cp ./platform_configs/product-manifest.yaml product-manifest.yaml
          mkdir -p deployment_artifacts

          export PATH="$HOME/.local/bin:$PATH"
          ls -la
          mkdir -p pkgs_deployable
          cp artifacts/*deployable.dploy pkgs_deployable
          package-deployer join --dploy_workspace "$(pwd)/pkgs_deployable"
          mv "$(pwd)/pkgs_deployable/merged.dploy" deployment_artifacts/deployable.dploy

          mkdir -p pkgs_undeployable
          cp artifacts/*3rdParty.dploy pkgs_undeployable
          package-deployer join --dploy_workspace "$(pwd)/pkgs_undeployable"
          mv "$(pwd)/pkgs_undeployable/merged.dploy" deployment_artifacts/3rdParty.dploy

          rm -rf pkgs_deployable pkgs_undeployable

          cp artifacts/*.json deployment_artifacts
          # if [ "${{ inputs.with_simulation }}" = "true" ];
          # then
          #   echo -e "$(cat ./artifacts/product-noetic.image.artifact)\n$(cat ./simulator.image.artifact)" > deployment_artifacts/product.image.artifact
          # else
          #   cp ./artifacts/product-noetic.image.artifact deployment_artifacts/product.image.artifact
          # fi
          cp ./artifacts/product-noetic.image.artifact deployment_artifacts/product.image.artifact
          cp deployment_artifacts/product.image.artifact ./

          integration-pipeline patch_manifest_with_spawner
          cat product-manifest.yaml
          cp product-manifest.yaml deployment_artifacts

          product_version=$(cat product.version)
          # danger zone. Everything will be deleted.
          git restore product.version
          git restore product-manifest.yaml
          git pull
          echo "$product_version" > product.version

          git add product.version
          git commit -m "[skip actions] Automatic Raise"
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Prepare raise variables
        id: pre_raise
        run: |
          #echo ::set-output name=branch::${GITHUB_REF#refs/heads/}
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Raise App version
        uses: CasperWA/push-protected@v2.14.0
        with:
          token: ${{ secrets.auto_commit_pwd }}
          branch: ${{ steps.pre_raise.outputs.branch }}
          unprotect_reviews: true

      - name: Github Publish
        shell: bash
        run: |
          commit_hash=$(git log --format="%H" -n 1)
          product_version=$(cat product.version)
          gh release create -p --generate-notes --target "$commit_hash" -t "${{ inputs.product_name }} $product_version" $product_version
          # add all files in the deployment_artifacts folder
          find deployment_artifacts -type f -exec gh release upload $product_version {} \;
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Update release notes
        shell: bash
        run: |
          # release version
          product_version=$(cat product.version)

          # get existent release body
          ORIGINAL_RN=$(gh release view "${product_version}" --json body | jq -r .body)
          echo -e "ORIGINAL_RN:\n ${ORIGINAL_RN}"

          # get release PRs
          PRS=$(echo "${ORIGINAL_RN}" | sed -rn "s/.* by @.* in https:\/\/github\.com\/${{ github.repository_owner }}\/${{ github.event.repository.name }}\/pull\/([0-9]+).*/\1/p" | tr '\n' ' ')
          # change to array
          PRS=($PRS)
          echo "Found the following PRs: ${PRS[@]}"

          # new release notes file
          rm -rf notes.txt

          # What's Changed - with info from PRs
          echo "## What's Changed" >> notes.txt

          if [ ${#PRS[@]} -eq 0 ]; then
              # no PRs exist
              echo "No relevant changes." >> notes.txt
          else
              # PRs exist
              for pr in "${PRS[@]}"; do
                  gh pr view "${pr}" --json body | jq -r .body >> notes.txt
              done
          fi
          echo "" >> notes.txt

          # PRs
          echo "## PRs" >> notes.txt
          if [ ${#PRS[@]} -eq 0 ]; then
              # no PRs exist
              echo "No PRs." >> notes.txt
          else
              # PRs exist
              echo "${ORIGINAL_RN}" | grep "\* .* by @.* in https://github.com/${{ github.repository_owner }}/" >> notes.txt
          fi
          echo "" >> notes.txt

          ## Diff
          echo "## Diff" >> notes.txt
          echo "${ORIGINAL_RN}" | grep "\*\*Full Changelog\*\*" >> notes.txt

          # set new release notes
          gh release edit "${product_version}" --notes-file notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.gh_token }}

      - name: Prepare slack variables
        if: always()
        id: pre_slack
        run: |
          MESSAGE=":white_check_mark: CI: ${GITHUB_REPOSITORY} (${GITHUB_REF#refs/heads/}), build: $(cat product.version) is stable :sunny: Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          MESSAGE_ERR=":x: CI: ${GITHUB_REPOSITORY}, (${GITHUB_REF#refs/heads/}), build: $(cat product.version) is unstable :rain_cloud: Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          #echo ::set-output name=msg::$MESSAGE
          #echo ::set-output name=msg_error::$MESSAGE_ERR
          echo "msg=$MESSAGE" >> $GITHUB_OUTPUT
          echo "msg_error=$MESSAGE_ERR" >> $GITHUB_OUTPUT

      - name: Slack message success
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: 'C050L85R6VC'
          slack-message: ${{ steps.pre_slack.outputs.msg }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_token_id }}

      - name: Slack message failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: 'C050L85R6VC'
          slack-message: ${{ steps.pre_slack.outputs.msg_error }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.slack_token_id }}
