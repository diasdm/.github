name: Component pipeline
on:
  workflow_call:
    inputs:
      vs_product_name:
        required: true
        type: string
      vs_product_version_pattern:
        required: true
        type: string
      download_artifact:
        required: false
        type: boolean

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      gh_token:
        required: true

env:
  CI_INTEGRATION_SCRIPTS_VERSION: "4.0.0.13"
  GITHUB_API_USR: "OttoMation-Movai"
  USERSPACE_FOLDER_PATH: userspace
  REMOTE_WORKSPACE_PATH: workspace

jobs:
  Platform-tests:
    runs-on: integration-pipeline

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install CI Scripts in container
        shell: bash
        run: |
          python3 -m venv ci_scripts --clear
          source ci_scripts/bin/activate
          python3 -m pip install integration-pipeline==$CI_INTEGRATION_SCRIPTS_VERSION --ignore-installed
          deactivate

      - name: Download component artifacts for patching
        if: inputs.download_artifact
        uses: actions/download-artifact@v4
        with:
          name: component_artifacts
          path: component_artifacts

      - name: fetch platform version
        shell: bash
        run: |
          source ci_scripts/bin/activate

          rm -rf product
          mkdir -p product
          integration-pipeline fetch_product_by_version \
                --product_version_search ${{ inputs.vs_product_version_pattern}} \
                --repo ${{ inputs.vs_product_name }} \
                --gh_api_user ${{ secrets.auto_commit_user }} \
                --gh_api_pwd ${{ secrets.auto_commit_pwd }} \
                --target_dir product


      - name: calculate robot.json to use
        shell: bash
        run: |
          PRODUCT=${{ inputs.vs_product_name }}
          QUICKSTART_VERSION=$(cat product/quickstart_version.txt)
          if [[ "$PRODUCT" == *"ee-project-platform"* ]]; then
            CONFIG_FILE_NAME=basic-standalone-noetic.json
          else
            CONFIG_FILE_NAME=spawner-${{ inputs.vs_product_name }}-noetic.json
          fi
          echo "product/$CONFIG_FILE_NAME" > product/robot.json

      - name: pre-install patch
        shell: bash
        run: |
          export CONFIG_FILE_NAME="$(cat product/robot.json)"
          export COMPONENT_VERSION=$(cat component_artifacts/component_version.txt)
          if test -f .github/workflows/pre_install_platform.bash; then
            echo "Running pre-install patch"
            . .github/workflows/pre_install_platform.bash
          fi

      - name: Upload robot configs (after pre-patch)
        uses: actions/upload-artifact@v4
        with:
          name: robot_configs_after_pre_patch
          path: product
          retention-days: 5

      - name: Install platform
        id: install
        shell: bash
        run: |
          timeout 30 movai-cli remove --all || true

          QUICKSTART_VERSION=$(cat product/quickstart_version.txt)
          export CONFIG_FILE_NAME=$(cat product/robot.json)

          export USERSPACE_FOLDER_PATH="$(pwd)/userspace"
          export ROBOTNAME="ci_robot"
          export PUBLIC_IP=$(hostname -I | awk '{print $1}')
          wget https://movai-scripts.s3.amazonaws.com/QuickStart_$QUICKSTART_VERSION.bash
          chmod +x ./QuickStart_$QUICKSTART_VERSION.bash
          ./QuickStart_$QUICKSTART_VERSION.bash --apps $(cat product/service_version.txt) $CONFIG_FILE_NAME

          MOVAI_USER="ci"
          MOVAI_PWD="4Iva6UHAQq9DGITj"
          for robot in $(movai-cli robots list); do
            movai-cli robots user "$robot" "$MOVAI_USER" "$MOVAI_PWD"
          done

          echo "movai_user=${MOVAI_USER}" >> $GITHUB_OUTPUT
          echo "movai_pwd=${MOVAI_PWD}" >> $GITHUB_OUTPUT

      - name: post-install patch
        shell: bash
        id: post_install
        run: |
          export CONFIG_FILE_NAME=$(cat product/robot.json)
          export MOVAI_USER="${{ steps.install.outputs.movai_user }}"
          export MOVAI_PWD="${{ steps.install.outputs.movai_pwd }}"
          if test -f .github/workflows/post_install_platform.bash; then
            echo "Running post-install patch"
            . .github/workflows/post_install_platform.bash
          fi

      - name: Upload robot configs (after post-patch)
        uses: actions/upload-artifact@v4
        with:
          name: robot_configs_after_post_patch
          path: product
          retention-days: 5

      - name: test setup
        shell: bash
        run: |
          export CONFIG_FILE_NAME=$(cat product/robot.json)
          export MOVAI_USER="${{ steps.install.outputs.movai_user }}"
          export MOVAI_PWD="${{ steps.install.outputs.movai_pwd }}"
          mkdir -p test_artifacts
          if test -f .github/workflows/test_setup.bash; then
            echo "Running tests setup"
            . .github/workflows/test_setup.bash
          fi

      - name: Run tests
        shell: bash
        run: |
          export CONFIG_FILE_NAME=$(cat product/robot.json)
          export MOVAI_USER="${{ steps.install.outputs.movai_user }}"
          export MOVAI_PWD="${{ steps.install.outputs.movai_pwd }}"
          if test -f .github/workflows/run_tests.bash; then
            echo "Running tests"
            . .github/workflows/run_tests.bash
          fi

      - name: Collect tests artifacts
        if: always()
        shell: bash
        run: |
          export CONFIG_FILE_NAME=$(cat product/robot.json)
          export MOVAI_USER="${{ steps.install.outputs.movai_user }}"
          export MOVAI_PWD="${{ steps.install.outputs.movai_pwd }}"
          if test -f .github/workflows/collect_tests_artifacts.bash; then
            echo "Collecting tests artifacts"
            . .github/workflows/collect_tests_artifacts.bash
          fi

      - name: Collect platform artifacts
        if: always()
        working-directory: test_artifacts
        shell: bash
        run: |
          # for sanity
          docker ps -a

          for container in backend spawner messager-server monitoring redis-master redis-local influxdb haproxy; do
             CONTAINER_ID=$(docker ps -a --format '{{.Names}}' --filter "name=^${container}-.*")
             docker logs "${CONTAINER_ID}" &> "${container}.log" || true
          done || true

          # movai-service
          journalctl -u movai-service --since '1hour ago' &> "movai-service.log"

          # spawner (mobros firmware)
          journalctl -u movai-service -t mobros --since '1hour ago' &> spawner-firmware.log || true

      - name: Upload test_artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_artifacts
          path: test_artifacts
