name: Build and pack Ros packages
on:
  workflow_call:
    inputs:
      deploy:
        required: false
        type: string
        default: 'false'
      release:
        required: false
        type: string
        default: 'false'
      ros_distro:
        required: true
        type: string
      prod_publish_repos:
        required: false
        type: string
        default: '["ppa-main"]'
      build_modes:
        required: false
        type: string
        default: '["release"]'
      run_catkin_tests:
        required: false
        type: boolean
        default: true

    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      aws_sqs_rosdep_access_key:
        required: true
      aws_sqs_rosdep_secret_access_key:
        required: true
      gh_token:
        required: true
      sonar_token:
        required: true

env:
  MOBTEST_VERSION: "0.0.6.1"

jobs:
  Build:
    strategy:
      matrix:
        distro: ${{ fromJSON(inputs.ros_distro) }}
        build_mode: ${{ fromJSON(inputs.build_modes) }}
    if: ${{ inputs.release == 'false' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/qa/ros-buildtools-${{ matrix.distro }}:v1.1.10
      options: --user root
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Validate Repository Package.xml
      run: |
        expected_url="<url>$GITHUB_SERVER_URL/$GITHUB_REPOSITORY</url>"
        VALIDATION_FILE="/tmp/verification-failed"
        find -L ./ -type f -name 'package.xml' -exec sh -c '

        search_result=$(cat $0 | grep "$1")
        is_movai_package=$(cat $0 | grep "<name>movai_")

        # is movai package ?
        if [ -n "$is_movai_package" ]:
        then
          if [ -z "$search_result" ]:
          then
              echo "\e[31m$0"
              touch $2
          fi
        fi

        ' {} $expected_url $VALIDATION_FILE \;

        if [ -f $VALIDATION_FILE ];
        then
            echo "\e[31mPlease add \033[0;36m$expected_url \e[31mto all the package.xmls mentioned above!"
            exit 1
        fi

    - name: Install Mobros
      run: python3 -m pip install mobros==1.0.1.22 --ignore-installed

    - name: Setup link to Ros userspace
      run: |
        mkdir /opt/mov.ai/user/cache/ros/src/
        ln -s $(pwd)/* /opt/mov.ai/user/cache/ros/src/

    - name: Raise version and validate Ros repository
      run: mobros raise --workspace="$(pwd)"

    - name: Build
      run: mobros build --mode ${{ matrix.build_mode }}

    - name: Pack
      run: |
        export MOVAI_OUTPUT_DIR="$(pwd)/artifacts"
        mobros pack --workspace="$(pwd)" --mode ${{ matrix.build_mode }}

    - name: Run Catkin tests
      if: ${{ inputs.run_catkin_tests }}
      shell: bash
      run: |
        cd $ROS1_USER_WS
        catkin test

    - name: Archive binary
      uses: actions/upload-artifact@v3
      with:
        name: packages
        path: artifacts/*

    - name: Print generated packages
      run: |
        ls -la artifacts

    - name: Print generated rosdep
      run: |
        cat /usr/local/rosdep/ros-pkgs.yaml

    - name: Rosdep Publish
      if: ${{ inputs.deploy == 'true' }}
      run: |
        export AWS_DEFAULT_REGION="eu-west-1"
        export AWS_ACCESS_KEY_ID="${{ secrets.aws_sqs_rosdep_access_key }}"
        export AWS_SECRET_ACCESS_KEY='${{ secrets.aws_sqs_rosdep_secret_access_key }}'
        mobros publish
        cat /usr/local/rosdep/ros-pkgs.yaml

  Test:
    if: ${{ inputs.release == 'false' }}
    runs-on: ubuntu-20.04
    needs: [Build]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # Disabling shallow clone is recommended for improving relevancy of reporting
          fetch-depth: 0
          submodules: recursive

      - name: Install Mobtest
        run: |
          python3 -m pip install \
          -i https://artifacts.cloud.mov.ai/repository/pypi-integration/simple --extra-index-url https://pypi.org/simple \
          mobtest==${{ env.MOBTEST_VERSION }} --ignore-installed

      - name: Mobtest validations
        run: |
          mobtest repo --issues ./mobtest-issues.json .

      - name: SonarQube Scan
        if: ${{ false }}
        uses: SonarSource/sonarqube-scan-action@v1.0.0
        env:
          SONAR_TOKEN: ${{ secrets.sonar_token }}
          SONAR_HOST_URL: https://sonarqube.aws.cloud.mov.ai
        with:
          projectBaseDir: ./
          args: >
            -Dsonar.organization=MOV-AI
            -Dsonar.projectKey=${{ github.event.repository.name }}
            -Dsonar.verbose=true
            -Dsonar.sources=.
            -Dsonar.scm.provider=git
            -Dsonar.qualitygate.wait=true
            -Dsonar.qualitygate.timeout=300
            -Dsonar.externalIssuesReportPaths=./mobtest-issues.json

      - name: Link to SonarQube Dashboard
        shell: bash
        run: |
          echo "Please check report here: https://sonarqube.aws.cloud.mov.ai/dashboard?id=${{ github.event.repository.name }}"
        id: sonar_links

  Publish:
    if: ${{ inputs.deploy == 'true' }}
    runs-on: ubuntu-20.04
    needs:  [Test]
    container:
      image: registry.aws.cloud.mov.ai/qa/ros-buildtools-noetic:v1.1.10
      options: --user root
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Download a single artifact
      uses: actions/download-artifact@v3
      with:
        name: packages
        path: artifacts

    - name: Print generated packages
      run: |
        ls -la .

    - name: Install Mobros
      run: python3 -m pip install mobros==1.0.1.21 --ignore-installed

    - name: Raise version and validate Ros repository
      run: mobros raise --workspace="$(pwd)"

    - name: Find package details
      id: vars
      run: |
            main_package=$(cat /tmp/main-package.mobrosinfo)
            build_version_section=$(cat $main_package | grep build_version)
            version_section=$(cat $main_package | grep "<version")
            main_version=$(echo $version_section | sed 's/ //g' | sed -e 's/<\w*>'//g | sed -e 's/<\/\w*>'//g)
            buildid=$(echo $build_version_section | sed 's/ //g' | sed -e 's/<\w*>'//g | sed -e 's/<\/\w*>'//g)
            VERSION="$main_version-$buildid"
            #echo ::set-output name=ros_pkg_version::$VERSION
            echo "ros_pkg_version=$VERSION" >> $GITHUB_OUTPUT

    - name: Publish to Nexus ppa-testing
      shell: bash
      run: |
          NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
          NEXUS_REPO="ppa-testing"

          for file in artifacts/*.deb
          do
            RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
            -H "Content-Type: multipart/form-data" \
            --data-binary "@$file" \
            -w '%{http_code}' \
            "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")

            #retry
            if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
              echo "Failed upload with $RETURN_CODE. Retrying"

              RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
                -H "Content-Type: multipart/form-data" \
                --data-binary "@$file" \
                -w '%{http_code}' \
                "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")
            fi

            if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
              echo "Failed upload with $RETURN_CODE. Exiting"
              exit 1
            fi

          done

    - name: Commit raise version
      id: raise
      run: |
        git config --global --add safe.directory $(pwd)
        git config --global user.name '${{ secrets.auto_commit_user }}'
        git config --global user.email '${{ secrets.auto_commit_mail }}'
        git pull
        git add **package.xml
        git commit -m "[skip actions] Automatic Bump of build version"
        git push
        commit_hash=$(git log --format="%H" -n 1)
        #echo ::set-output name=commit_id::$commit_hash
        echo "commit_id=$commit_hash" >> $GITHUB_OUTPUT


    - name: Create Github Release
      uses: softprops/action-gh-release@v1
      with:
        name: "Release of ${{ steps.vars.outputs.ros_pkg_version }}"
        body: "Please add release notes"
        tag_name: ${{ steps.vars.outputs.ros_pkg_version }}
        target_commitish: ${{ steps.raise.outputs.commit_id }}
        token: ${{ secrets.gh_token }}
        prerelease: true
        generate_release_notes: true
        files: artifacts/*.deb

  Release:
    strategy:
      matrix:
        publish_repo: ${{ fromJSON(inputs.prod_publish_repos) }}
    if: ${{ inputs.release == 'true' }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/qa/ros-buildtools-noetic:v1.1.10
      options: --user root
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Set tag output
      id: vars
      run: echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

    - name: Fetch artifact from github release
      run: |
        git config --global --add safe.directory $(pwd)
        mkdir artifacts
        cd artifacts
        gh release download ${{ steps.vars.outputs.tag}} -p *.deb
      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}

    - name: Publish to Nexus
      shell: bash
      run: |
            NEXUS_REPO="${{ matrix.publish_repo }}"
            if [ "$NEXUS_REPO" != "ppa-public" ]; then
              NEXUS_ENDPOINT="artifacts.cloud.mov.ai"
            else
              NEXUS_ENDPOINT="artifacts.aws.cloud.mov.ai"
            fi

            for file in artifacts/*.deb
            do
              RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
              -H "Content-Type: multipart/form-data" \
              --data-binary "@$file" \
              -w '%{http_code}' \
              "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")

              #retry
              if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
                echo "Failed upload with $RETURN_CODE. Retrying"

                RETURN_CODE=$(curl -u "${{ secrets.nexus_publisher_user }}:${{ secrets.nexus_publisher_password }}" \
                  -H "Content-Type: multipart/form-data" \
                  --data-binary "@$file" \
                  -w '%{http_code}' \
                  "https://$NEXUS_ENDPOINT/repository/$NEXUS_REPO/")
              fi

              if [[ ! "$RETURN_CODE" =~ ^(200|201|202)$ ]]; then
                echo "Failed upload with $RETURN_CODE. Exiting"
                exit 1
              fi

            done
