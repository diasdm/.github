name: Build and pack py packages
on:
  workflow_call:
    inputs:
      deploy:
        required: false
        type: boolean
        default: false
      release:
        required: false
        type: boolean
        default: false
      run_black:
        required: false
        type: boolean
        default: false
        description: When 'true' black is run stopping the pipeline if any files are not properly formatted
      with_docs:
        required: false
        type: boolean
        default: false
        description: When true documentation is published, the branch gh-pages must be created manually 'git checkout --orphan gh-pages && touch .nojekyll && git add .nojekyll && git commit -m "Initial commit" && git push --set-upstream origin gh-pages'
      prod_publish_repos:
        required: false
        type: string
        default: '["pypi-edge"]'
    secrets:
      auto_commit_user:
        required: false # only when deploy true
      auto_commit_mail:
        required: false # only when deploy true
      auto_commit_password:
        required: false
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
      gh_token:
        required: true
      sonar_token:
        required: true

jobs:
  RefreshSource:
    if: ${{ ! inputs.deploy }}
    runs-on: ubuntu-20.04
    steps:
      - uses: docker://chinthakagodawita/autoupdate-action:v1
        continue-on-error: true
        env:
          GITHUB_TOKEN: '${{ secrets.auto_commit_password }}'
          MERGE_MSG: "Branch was auto-updated."
  Build:
    if: ${{ ! inputs.release }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        submodules: recursive

    - name: Upgrade pip
      run: python3 -m pip install pip --upgrade

    - name: Install build-requirements
      run: python3 -m pip install -r build-requirements.txt

    - name: Install python package
      run: python3 -m pip install .

    - name: Run Black
      if: ${{ inputs.run_black }}
      run: |
        python3 -m black \
          --line-length 100 \
          --diff \
          --check \
          .

    - name: Python Linters
      # run linters isolated so no issues are masked from SonarCloud
      run: |
        python3 -m flake8 \
          --isolated \
          --exclude dist,.*\.egg-info,.git,__pycache__,.tox,venv \
          --max-complexity 10 \
          --max-line-length 100 \
          --exit-zero \
          --output-file flake8-report.txt

        # pylint seems to not have a way to ignore configuration files
        # so we need to provide it a dummy one
        touch dummy-pylint-config
        python3 -m pylint \
          --rcfile dummy-pylint-config \
          --ignore-patterns dist,.*\.egg-info,.git,__pycache__,.tox,venv \
          --max-line-length 100 \
          --exit-zero \
          --output pylint-report.txt \
          .

    - name: Run tests
      run: |
        if [ -f tox.ini ]; then
            # run tests and generates coverage.xml
            tox
        else
            # run tests
            python3 -m pytest tests/
        fi

    - name: Create SonarCloud project and disable autoscan
      uses: MOV-AI/action-sonarcloud-proj-config@v1
      with:
        sonar_org: 'mov-ai'
        sonar_token: ${{ secrets.sonar_token }}

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2.0.2
      env:
        GITHUB_TOKEN: ${{ github.token }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.sonar_token }}
      with:
        projectBaseDir: ./
        args: >
          -Dsonar.organization=mov-ai
          -Dsonar.projectKey=${{ github.repository_owner }}_${{ github.event.repository.name }}
          -Dsonar.sources=.
          -Dsonar.scm.provider=git
          -Dsonar.qualitygate.wait=true
          -Dsonar.qualitygate.timeout=300
          -Dsonar.coverage.exclusions=tests/**,docs/**
          -Dsonar.cpd.exclusions=tests/**,docs/**
          -Dsonar.python.version=3
          -Dsonar.python.flake8.reportPaths=flake8-report.txt
          -Dsonar.python.pylint.reportPaths=pylint-report.txt
          -Dsonar.python.coverage.reportPaths=coverage.xml

    - name: Link to SonarCloud dashboard
      shell: bash
      run: |
        echo "Please check report here: https://sonarcloud.io/project/overview?id=${{ github.repository_owner }}_${{ github.event.repository.name }}"

    - name: Raise version
      if: ${{ inputs.deploy }}
      run: bump2version build setup.py --no-tag --no-commit

    - name: Find Package details
      id: vars
      run: |
        PACKAGE_VERSION=$(cat .bumpversion.cfg | sed s/' '/''/g | grep 'current_version=' | sed s/'current_version='/''/g)
        PACKAGE_NAME=$(cat setup.py | grep name | cut -d '"' -f2)

        echo ::set-output name=py_pkg_name::$PACKAGE_NAME
        echo ::set-output name=py_pkg_version::$PACKAGE_VERSION

    - name: Sync setup.py
      run: sed -i s/"$(cat setup.py | grep version=)"/"    version=\"${{ steps.vars.outputs.py_pkg_version }}\","/g setup.py

    - name: Commit auto raise version
      id: raise
      if: ${{ inputs.deploy }}
      run: |
        git config --global --add safe.directory $(pwd)
        git config --global user.name ${{ secrets.auto_commit_user }}
        git config --global user.email ${{ secrets.auto_commit_mail }}
        git add setup.py
        git add .bumpversion.cfg
        git add **__version__.py || true
        git commit -m "[skip actions] Automatic Bump of build version"

    - name: Set branch output
      if: ${{ inputs.deploy }}
      id: var_branch
      run: |
        echo "Branch name is: ${GITHUB_REF#refs/heads/}"
        echo ::set-output name=branch::${GITHUB_REF#refs/heads/}

    - name: Raise App version
      if: ${{ inputs.deploy }}
      uses: CasperWA/push-protected@v2.14.0
      with:
        token: ${{ secrets.auto_commit_password }}
        branch: ${{ steps.var_branch.outputs.branch }}
        unprotect_reviews: true

    - name: Commit of version
      if: ${{ inputs.deploy }}
      id: commit_id
      run: |
        commit_hash=$(git log --format="%H" -n 1)
        echo ::set-output name=commit_id::$commit_hash

    - name: Enable 4 digit version
      id: releasevars
      run: |
        PACKAGE_RELEASE_VERSION=$(echo ${{ steps.vars.outputs.py_pkg_version }} | sed s/"-"/"."/g)
        sed -i s/"$(cat setup.py | grep version=)"/"$(cat setup.py | grep version= | sed s/"-"/"."/g)"/g setup.py

        echo ::set-output name=py_pkg_version::$PACKAGE_RELEASE_VERSION

    - name: build
      run: python3 -m build

    - name: Archive binary
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: dist/*
        retention-days: 5

    - name: Publish package to TestPyPI Experimental
      uses: pypa/gh-action-pypi-publish@v1.11.0
      with:
        user: ${{ secrets.nexus_publisher_user }}
        password: ${{ secrets.nexus_publisher_password }}
        repository-url: https://artifacts.aws.cloud.mov.ai/repository/pypi-experimental/

    - name: Build docs
      if: ${{ inputs.with_docs }}
      run: |
        VERSION=${GITHUB_REF##*/} tox -e docs

    - name: Checkout gh-pages
      if: ${{ inputs.deploy && inputs.with_docs }}
      uses: actions/checkout@v3
      with:
        ref: gh-pages
        path: gh-pages

    - name: Push docs
      if: ${{ inputs.deploy && inputs.with_docs }}
      run: |
        cd gh-pages

        # create .nojekyll
        touch .nojekyll

        # delete old folder if existed
        rm -rf ${GITHUB_REF##*/}

        # copy new docs and root index.html
        cp -r ../docs/build/* .

        # update versions.json
        ls -mQd */ | sed 's/\///g' | sed 's/^/[/' | sed 's/$/]/' > versions.json

        # set user
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
        git config --global user.name "${{ github.actor }}"

        # commit docs
        git add .
        git commit -am "Updating docs for commit ${GITHUB_SHA} in ${GITHUB_REF}"

        # overwrite the contents of the gh-pages branch on our github.com repo
        git push --force --set-upstream origin gh-pages

    - name: Publish package to TestPyPI Integration
      if: ${{ inputs.deploy }}
      uses: pypa/gh-action-pypi-publish@v1.11.0
      with:
        user: ${{ secrets.nexus_publisher_user }}
        password: ${{ secrets.nexus_publisher_password }}
        repository-url: https://artifacts.aws.cloud.mov.ai/repository/pypi-integration/

    - name: Create Github Release
      if: ${{ inputs.deploy }}
      shell: bash
      run: |
        title="Release of ${{ steps.releasevars.outputs.py_pkg_version }}"
        git config --global --add safe.directory $(pwd)

        gh release create -p -t "$title" -n "Release notes for ${{ steps.vars.outputs.py_pkg_name }}" \
        --target ${{ steps.commit_id.outputs.commit_id }} \
        --generate-notes \
        ${{ steps.releasevars.outputs.py_pkg_version }}

        # add all files in the artifacts folder
        assets=()
        for asset in dist/*; do
          # do nothing if folder is empty
          if [[ $asset != "dist/*" ]]; then
            gh release upload ${{ steps.releasevars.outputs.py_pkg_version }} $asset
          fi
        done

      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}


  Release:
    strategy:
      matrix:
        publish_repo: ${{ fromJSON(inputs.prod_publish_repos) }}
    if: ${{ inputs.release }}
    runs-on: ubuntu-20.04
    container:
      image: registry.aws.cloud.mov.ai/devops/py-buildserver:latest
      credentials:
        username: ${{secrets.registry_user}}
        password: ${{secrets.registry_password}}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set tag output
      id: vars
      run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

    - name: Fetch artifact from github release
      run: |
        git config --global --add safe.directory $(pwd)
        mkdir dist
        cd dist
        gh release download ${{ steps.vars.outputs.tag}} -p *.whl
        gh release download ${{ steps.vars.outputs.tag}} -p *.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.gh_token }}

    - name: Archive binary
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: dist/*
        retention-days: 5

    - name: Publish package to ${{ matrix.publish_repo }}
      uses: pypa/gh-action-pypi-publish@v1.11.0
      with:
        user: ${{ secrets.nexus_publisher_user }}
        password: ${{ secrets.nexus_publisher_password }}
        repository-url: https://artifacts.aws.cloud.mov.ai/repository/${{ matrix.publish_repo }}/
