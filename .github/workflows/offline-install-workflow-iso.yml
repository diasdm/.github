name: Build Offline ISO 
on:
  workflow_call:
    inputs:
      OS_NAME:
        type: string
        required: true
      OS_VERSION:
        type: string
        required: true
      OS_FULL_VERSION:
        type: string
        required: true
      PRODUCT_TYPE:
        type: string
        required: true
      PRODUCT_NAME:
        type: string
        required: true
      PRODUCT_VERSION:
        type: string
        required: true
      deploy:
        type: string
        required: true
      release:
        type: string
        required: true
      slack_channel:
        required: false
        type: string
        default: "C05UYMX2U0K"
    secrets:
      auto_commit_user:
        required: true
      auto_commit_mail:
        required: true
      auto_commit_pwd:
        required: true
      registry_user:
        required: true
      registry_password:
        required: true
      nexus_publisher_user:
        required: true
      nexus_publisher_password:
        required: true
env:
  RUN_STAGING_DIR: "/home/devops/iso-ci/staging/${{ github.repository }}/${{ github.run_id}}/"
  PROXMOX_NFS_SERVER_PATH: "/media/nas-mary/template/iso/baremetal"
  PROXMOX_NFS_SERVER_URL: "https://hel.mov.ai:8006/#v1:0:=storage%2Fhel%2Fnas-mary:4:5:=contentIso:::::"

jobs:
  Build:
    outputs:
      raised_version: ${{ steps.raise.outputs.raised_version }}
      file_name: ${{ steps.prepare_deploy.outputs.file_name }}
    runs-on: packer-runner
    steps:
      - uses: rtCamp/action-cleanup@master
      - name: Checkout
        uses: actions/checkout@v4

      - name: Agent info
        run: |
          echo "public ip: $(curl ipinfo.io/ip)"
          echo "private ip: $(hostname -I | awk '{print $1}')"

      - name: Lint with shellcheck
        uses: azohra/shell-linter@latest
        with:
          path: ./*.bash

      - name: Raise Version
        id: raise
        shell: bash
        run: |
          COMP_VERSION=$(cat version)
          main_version=${COMP_VERSION%-*}
          build_id="${COMP_VERSION#*-}"
          raised_buildid=$(($build_id+1))
          RAISED_COMP_VERSION="$main_version-$raised_buildid"
          echo $RAISED_COMP_VERSION>version
          echo $RAISED_COMP_VERSION
          echo "raised_version=$RAISED_COMP_VERSION" >> $GITHUB_OUTPUT

      - name: Create config file
        run: |
          echo "UBUNTU_NAME=${{ inputs.OS_NAME }}" > config.cfg
          echo "UBUNTU_VERSION=${{ inputs.OS_VERSION }}" >> config.cfg
          echo "UBUNTU_VERSION_BUILD=${{ inputs.OS_FULL_VERSION }}" >> config.cfg
          echo "HOSTNAME=${{ inputs.HOSTNAME }}" >> config.cfg
          echo "SSID=MOVAIPT" >> config.cfg
          echo "PASSWORD=${{ secrets.WIFI_MOVAIPT_PASSWORD }}" >> config.cfg
          echo "WIFI_INTERFACE=wlo1" >> config.cfg
          echo "ETHERNET_INTERFACE=enp7s0" >> config.cfg
          echo "DHCP4=yes" >> config.cfg
          echo "OPTIONAL=true" >> config.cfg


      - name: Fetch platform artifacts
        run: |
          wget https://movai-scripts.s3.amazonaws.com/Deployment_Toolkit.bash
          chmod +x Deployment_Toolkit.bash
          ./Deployment_Toolkit.bash
        env:
          DOCKER_REG_USER: ${{ secrets.registry_user }}
          DOCKER_REG_PWD: ${{ secrets.registry_password }}
          NX_API_USR: ${{ secrets.nexus_publisher_user }}
          NX_API_PWD: ${{ secrets.nexus_publisher_password }}
          GITHUB_API_USR: ${{ secrets.auto_commit_user }}
          GITHUB_API_PWD: ${{ secrets.auto_commit_pwd }}
          PRODUCT_NAME: ${{ inputs.PRODUCT_NAME }}
          PRODUCT_VERSION: ${{ inputs.PRODUCT_VERSION }}


      - name: Run the script
        run: |
          mv offline_install_artifacts/* .
          ./mkisofs-movai-autoinstall.bash config.cfg

    
      - name: Prepare for deployment
        if: ${{ inputs.deploy == 'true' && inputs.release == 'false' }}
        id: prepare_deploy
        run: |
          generated_file_name=${{ inputs.PRODUCT_NAME }}_${{ steps.raise.outputs.raised_version }}_offline_install.iso
          echo "::group::Artifact local copy to staging area $RUN_STAGING_DIR"
          mkdir -p $RUN_STAGING_DIR
          mv "${{ inputs.OS_NAME }}-${{ inputs.OS_VERSION }}/ubuntu-custom-${{ inputs.OS_NAME }}-${{ inputs.OS_FULL_VERSION }}.iso" "$RUN_STAGING_DIR/$generated_file_name"
          echo "file_name=$generated_file_name" >> $GITHUB_OUTPUT

      - name: Clean up
        if: always()
        run: |
          docker rm -f $(docker ps -a -q) || true
          docker rmi -f $(docker images -q) || true

  Create-Release:
    runs-on: ubuntu-latest
    needs: Build
    if: ${{ inputs.deploy == 'true' && inputs.release == 'false' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Commit raise
        if: ${{ inputs.deploy == 'true' }}
        run: |
          git config --global --add safe.directory $(pwd)
          git config --global user.name '${{ secrets.auto_commit_user }}'
          git config --global user.email '${{ secrets.auto_commit_mail }}'
          git config --global user.password ${{ secrets.auto_commit_pwd }}
          git restore version
          git pull
          echo "${{ needs.Build.outputs.raised_version }}">version
          git add version
          git commit -m "[skip actions] Automatic Bump of image version to ${{ needs.Build.outputs.raised_version }}"

      - name: Prepare raise variables
        id: pre_raise_push
        run: |
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT

      - name: Raise App version
        uses: CasperWA/push-protected@v2
        with:
          token: ${{ secrets.auto_commit_pwd }}
          branch: ${{ steps.pre_raise_push.outputs.branch }}
          unprotect_reviews: true

      - name: Commit info
        id: commit
        shell: bash
        run: |
          commit_hash=$(git log --format="%H" -n 1)
          echo "commit_id=$commit_hash" >> $GITHUB_OUTPUT

      - name: Create Github Release
        uses: softprops/action-gh-release@v1
        with:
          name: "Release of ${{ needs.Build.outputs.raised_version }}"
          body: "Please add release notes"
          tag_name: ${{ needs.Build.outputs.raised_version }}
          target_commitish: ${{ steps.commit.outputs.commit_id }}
          token: ${{ secrets.auto_commit_pwd }}
          prerelease: true
          generate_release_notes: true

  Deploy-Images:
    runs-on: packer-runner
    needs: [ Build, Create-Release ]
    if: ${{ inputs.deploy == 'true' && inputs.release == 'false' }}
    steps:
      - name: Test NFS server
        run: |
          if [ ! -d "$PROXMOX_NFS_SERVER_PATH" ]; then
            echo "ERROR: NFS server path $PROXMOX_NFS_SERVER_PATH does not exist."
            exit 1
          fi

      - name: Deploy images to NFS server
        run: |
          sudo mkdir -p $PROXMOX_NFS_SERVER_PATH/

          sudo rsync --progress -z $RUN_STAGING_DIR/${{ needs.Build.outputs.file_name }} $PROXMOX_NFS_SERVER_PATH/
          echo "Image copied to NFS server to $PROXMOX_NFS_SERVER_URL"

      - name: Prepare slack variables
        if: always()
        id: pre_slack
        run: |
          MESSAGE=":arrow_forward: New pre-version ${{ needs.Build.outputs.raised_version }} of baremetal image available :sunny:"
          MESSAGE_ERR=":x: Build of pre-version ${{ needs.Build.outputs.raised_version }} is unstable :rain_cloud: Details: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"

          echo "msg=${MESSAGE}" >> $GITHUB_OUTPUT
          echo "msg_error=${MESSAGE_ERR}" >> $GITHUB_OUTPUT

      # - name: Slack message success
      #   uses: slackapi/slack-github-action@v1.25.0
      #   with:
      #     channel-id: ${{ inputs.slack_channel }}
      #     slack-message: ${{ steps.pre_slack.outputs.msg }}
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN_ID }}

      # - name: Slack message failure
      #   if: failure()
      #   uses: slackapi/slack-github-action@v1.25.0
      #   with:
      #     channel-id: ${{ inputs.slack_channel }}
      #     slack-message: ${{ steps.pre_slack.outputs.msg_error }}
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_TOKEN_ID }}

      - name: Cleanup
        if: always()
        shell: bash
        run: |
          rm -rf $RUN_STAGING_DIR
        